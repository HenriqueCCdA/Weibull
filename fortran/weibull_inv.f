c **********************************************************************
c * Data de criacao    : 08/03/2020                                    *
c * Data de modificaco : 00/00/0000                                    * 
c * ------------------------------------------------------------------ *   
c * Subroutine weibull : calculo de b e c apartir de mu e sig          *    
c * ------------------------------------------------------------------ * 
c * Parametros de entrada:                                             *
c * ------------------------------------------------------------------ * 
c * mu    - media                                                      *
c * sig   - desvio padrão                                              *
c * b     - nao definido                                               *
c * c     - nao definido                                               *
c * tol   - tolerancia do residuo                                      *
c * maxIt - numero maximo de iteracaos                                 *
c * ------------------------------------------------------------------ * 
c * Parametros de saida:                                               *
c * ------------------------------------------------------------------ *
c * b - valor de b para mu e sig                                       *
c * c - valor de c para mu e sig                                       *
c * ------------------------------------------------------------------ * 
c * OBS:                                                               *
c * ------------------------------------------------------------------ *
c *        | z*gamma(z)     0.0         0.0   |                        *  
c * A(x) = |        0.0 c^2*gamma(w)    0.0   |                        *
c *        |        0.0    -1.0         2.0   |                        *
c *                                                                    *
c *     | c |       |     mu       |                                   *
c * x = | w |   f = | sig^2 + mu^2 |                                   *
c *     | z |       |     0.0      |                                   *
c *                                                                    *
c * ------------------------------------------------------------------ * 
c **********************************************************************
      subroutine weibull(mu,sig,b,c,tol,maxIt)
      implicit none
      logical fFlag
      integer i,j,maxIt
      real*8 mu,sig,x(3),x0(3),f(2),b,c
      real*8 a(4),alf
      real*8 tol,modRes,res
c ...
      fFlag = .true.
      alf   = 0.5d0
c ... chute inicial 
      c    = mu     
      b    = sig/mu 
      x(1) =   c        ! c
      x(2) =   2.d0/b   ! w
      x(3) =   1.d0/b   ! z
c .....................................................................
c
c ... inicializando o vetor F 
      f(1) = mu
      f(2) = sig**2 + mu**2
c .....................................................................
c
c ...
      do i = 1, maxIt
c ...
        x0(:) = x(:)
c .....................................................................
c
c ... atualizando a matriz a
        call updateA(a,x)
c .....................................................................
c
c ...
        res = modRes(f,a,x)
        if (res .lt. tol) then
          fFlag =.false.
          exit
        endif
c .....................................................................
c
c ...  x = (A^-1)*F
        call solvA(a,x,f)
c .....................................................................
c
c ... relaxamento
        x(:) = alf*x(:) + (1.d0 - alf)*x0(:)
c .....................................................................
      enddo
c .....................................................................
c
c ...
      if (fFlag) then
        print*,'!!!Warning!!!'
      endif
c .....................................................................
c
c ...
      print*,'********************************************************'
      print*,'Apos ',i,'o residuo foi de ',res
      print*,'********************************************************'
      print*,''
      c = x(1)
      b = 2.d0/x(2)
c .....................................................................
      return
      end
c *********************************************************************
c
c **********************************************************************
c * Data de criacao    : 08/03/2020                                    *
c * Data de modificaco : 00/00/0000                                    * 
c * ------------------------------------------------------------------ *   
c * Subroutine updateA : atualizacao da matriz a com os valores x      *    
c * ------------------------------------------------------------------ * 
c * Parametros de entrada:                                             *
c * ------------------------------------------------------------------ * 
c * a - matriz 3x3 em funcao de x                                      *
c * x - valores de x                                                   *
c * ------------------------------------------------------------------ * 
c * Parametros de saida:                                               *
c * ------------------------------------------------------------------ *
c * a - matriz atualizada                                              *
c * ------------------------------------------------------------------ * 
c * OBS:                                                               *
c * ------------------------------------------------------------------ *
c *        | z*gamma(z)     0.0         0.0   |                        *  
c * A(x) = |        0.0 c^2*gamma(w)    0.0   |                        *
c *        |        0.0    -1.0         2.0   |                        *
c *                                                                    *
c *     | c |                                                          *
c * x = | w |                                                          *
c *     | z |                                                          *
c *                                                                    *
c * ------------------------------------------------------------------ * 
c **********************************************************************
      subroutine updateA(a,x)
      implicit none
      real*8 a(4)
      real*8 x(3)
c ... 
      a(1) = x(3)*gamma(x(3))      ! A11
      a(2) = (x(1)**2)*gamma(x(2)) ! A22
      a(3) =  2.d0                 ! A33
      a(4) = -1.d0                 ! A23
c .....................................................................
      return
      end
c *********************************************************************
c
c **********************************************************************
c * Data de criacao    : 08/03/2020                                    *
c * Data de modificaco : 00/00/0000                                    * 
c * ------------------------------------------------------------------ *   
c * Subroutine modRes  : modulo do residuo                             *    
c * ------------------------------------------------------------------ * 
c * Parametros de entrada:                                             *
c * ------------------------------------------------------------------ * 
c * ------------------------------------------------------------------ * 
c * Parametros de saida:                                               *
c * ------------------------------------------------------------------ *
c * ------------------------------------------------------------------ * 
c * OBS:                                                               *
c * ------------------------------------------------------------------ *
c * ------------------------------------------------------------------ * 
c **********************************************************************
      real*8 function modRes(f,a,x)
      implicit none
      real*8  f(2),x(3),r(3)
      real*8 a(4)
c ... R = F - Ax
      r(1) = f(1) - a(1)*x(1)
      r(2) = f(2) - a(2)*x(2)
      r(3) = - a(3)*x(3) - a(4)*x(2)
c ......................................................................
c 
c ... |R|
      modRes = dsqrt(r(1)*r(1) + r(2)*r(2) + r(3)*r(3)) 
c .....................................................................
      return
      end
c *********************************************************************
c
c **********************************************************************
c * Data de criacao    : 08/03/2020                                    *
c * Data de modificaco : 00/00/0000                                    * 
c * ------------------------------------------------------------------ *   
c * Subroutine solA    : modulo do residuo                             *    
c * ------------------------------------------------------------------ * 
c * Parametros de entrada:                                             *
c * ------------------------------------------------------------------ * 
c * ------------------------------------------------------------------ * 
c * Parametros de saida:                                               *
c * ------------------------------------------------------------------ *
c * ------------------------------------------------------------------ * 
c * OBS:                                                               *
c * ------------------------------------------------------------------ *
c * ------------------------------------------------------------------ * 
c **********************************************************************
      subroutine solvA(a,x,f)
      implicit none
      real*8  f(2),x(3)
      real*8 a(4)
c ... x = (A^-1)*F
      x(1) = f(1)/a(1)
      x(2) = f(2)/a(2)         
      x(3) = -a(4)*x(2)/a(3)
c ......................................................................
      return
      end
c *********************************************************************
